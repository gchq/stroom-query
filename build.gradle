buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.5.2'
        classpath 'com.benjaminsproule:swagger-gradle-plugin:1.0.14'
    }
}

plugins {
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

ext.isPropertySet = { propName ->
    if (!project.hasProperty(propName)) {
        return false
    } else {
        def prop = project.getProperty(propName)
        return (prop != "unspecified" && (prop != "" || prop != null))
    }
}

ext.ensurePropertyIsSet = { propName -> 
    if (!isPropertySet(propName)) {
        throw new GradleException(
            "Expecting project property [${propName}] or env var [ORG_GRADLE_PROJECT_${propName}] to be set.")
    }
}

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue ->
    def val;
    if (isPropertySet(propName)) {
        val = project.getProperty(propName)
        println "Getting property [$propName] with value [$val]"
    } else {
        val = defaultValue
        println "Property [$propName] has no value, using default value [$val]"
    }
    return val;
}

ext.versions = [
    //----------Stroom-----------------
    stroomQuery: getPropertyOrDefault('version', 'SNAPSHOT').replaceFirst(/^v/, ""),

    //------Stroom-libs---------------
    stroomExpression: '1.5.15',
    eventLogging: '3.3.0_schema-v3.3.1',

    //------------3rd-party------------
    dropwizard: '1.3.14',
    jackson: '2.9.9', //in line with dropwizard 1.3.14
    logback: '1.2.3', //in line with dropwizard 1.3.14
    kafka: '0.10.0.1',
    slf4j: '1.7.26', //in line with dropwizard 1.3.14
    swagger: '1.5.16',
    zzDUMMYzz: 'makes sorting this list easier'
]

//dependency strings for use in sub projects
ext.libs = [
    //------GCHQ-libs---------------
    eventLogging: "uk.gov.gchq.eventlogging:event-logging:$versions.eventLogging",
    stroomExpression: "uk.gov.gchq.stroom.expression:stroom-expression:$versions.stroomExpression",

    //------------3rd-party------------
    assertj: 'org.assertj:assertj-core:3.8.0',
    dropwizard_core: "io.dropwizard:dropwizard-core:$versions.dropwizard",
    dropwizard_hibernate: "io.dropwizard:dropwizard-hibernate:$versions.dropwizard",
    dropwizard_auth: "io.dropwizard:dropwizard-auth:$versions.dropwizard",
    dropwizard_auth_jwt: "com.github.toastshaman:dropwizard-auth-jwt:1.0.2-0",
    dropwizard_flyway: 'io.dropwizard.modules:dropwizard-flyway:1.0.0-1',
    dropwizard_testing: "io.dropwizard:dropwizard-testing:$versions.dropwizard",
    guava: "com.google.guava:guava:21.0", //>=v21 removes MoreExecutors.sameThreadExecutor() which is needed by curator 2.11
    jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson",
    jackson_core: "com.fasterxml.jackson.core:jackson-core:$versions.jackson",
    jackson_databind: "com.fasterxml.jackson.core:jackson-databind:$versions.jackson", 
    junit: "junit:junit:4.12",
    logback_classic: "ch.qos.logback:logback-classic:$versions.logback",
    logback_core: "ch.qos.logback:logback-core:$versions.logback",
    kafka: "org.apache.kafka:kafka-clients:$versions.kafka", //CDH5.10 uses kafka 10.0, Kafka <10.2 is picky about client and server versions.
    mariadb_connector: 'org.mariadb.jdbc:mariadb-java-client:2.0.2',
    mockito_core: "org.mockito:mockito-core:2.0.2-beta",
    slf4j_api: "org.slf4j:slf4j-api:$versions.slf4j",
    swagger_annotations: "io.swagger:swagger-annotations:$versions.swagger",
    ws_rs_api: "javax.ws.rs:javax.ws.rs-api:2.0.1",
    wiremock: 'com.github.tomakehurst:wiremock:2.14.0',
    zzDUMMYzz: "makes sorting easier"
]

ext.isReleaseBuild = !versions.stroomQuery.endsWith('SNAPSHOT')

if (isReleaseBuild) {
    println "This is a release build for maven version [${versions.stroomQuery}]"
    // Ensure the various props are set for signing and publishing to sonatype

    // The username for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypeUsername")
    // The password for Sonatype OSSRH Jira account
    ensurePropertyIsSet("sonatypePassword")
    // The GPG2 secret key in ascii armour format, base64 encoded
    ensurePropertyIsSet("signingKey")
    // The password for the GPG2 secret key
    ensurePropertyIsSet("signingPassword")
}

//defines a list of gradle projects that we will publish with maven
def projectsToBePublished = subprojects.findAll { project ->
    project.path in [
        ':stroom-query-api',
        ':stroom-query-common',
        ':stroom-query-audit',
    ]
}

// To give us the clean task on the root project
apply plugin: 'base'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

allprojects {
    group = 'uk.gov.gchq.stroom.query'
    version = versions.stroomQuery
}

String base64DecodeProjectProperty(String propName) {
    def encodedVal = project.findProperty(propName)
    return encodedVal == null
        ? null
        : new String(Base64.getDecoder().decode(encodedVal.toString())).trim()
}

void configureSigning(Project project) {

    // To create the GPG key do:
    //   gpg2 --gen-key 
    // To list it
    //   gpg2 --list-keys
    // To publish the public key on a keyserver
    //   gpg2 --keyserver hkp://keyserver.ubuntu.com --send-keys <your short key id>
    // To get the ascii-armour private key for use in travis env vars as base64 encoded
    //   gpg2 --armor --export-secret-keys <your short key id> | base64 -w0

    //project.signing.gnupg.keyName = project.findProperty("signingKeyId")

    project.signing {
        println "Configuring project to sign maven artifacts"
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = base64DecodeProjectProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")

        //println "pword: [$signingPassword]"
        //println "key: [$signingKey]"
        //println "keyId: [$signingKeyId]"

        if (signingKeyId) {
            println "Using in memory pgp key with ID"
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            println "Using in memory pgp key without ID"
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        //useGpgCmd()
        sign project.publishing.publications.mavenJava
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testImplementation libs.junit
        testImplementation libs.mockito_core
    }
}

// configuration for the projects that are being published in maven
configure(projectsToBePublished) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    //for java plugin
    //see https://docs.gradle.org/current/userguide/java_plugin.html
    java {
        //package JavaDoc as part of publication
        withJavadocJar()
        //package Sources as part of publication
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = project['name']
                    description = project['description']
                    url = 'https://github.com/gchq/stroom-query'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'GCHQDevelopers'
                            organization = 'GCQH'
                            organizationUrl = 'https://github.com/gchq'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:gchq/stroom-query.git'
                        developerConnection = 'scm:git:git@github.com:gchq/stroom-query.git'
                        url = 'https://github.com/gchq/stroom-query'
                    }
                }         
            }
        }
    }

    def hasSigningKey = project.hasProperty("signingkeyId") || project.findProperty("signingKey")
    if(hasSigningKey) {
        configureSigning(project)
    }
}

// Uses sonotypeUsername and sonotypePassword
// See https://github.com/rwinch/gradle-publish-ossrh-sample
// Also https://github.com/kit-data-manager/nexus-publish-example
nexusPublishing {
    repositories {
        sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

// This is so we can publish the javadoc for all sub projects as a single aggregated set on
// github pages. It is in addition to the javadoc generated for maven publishing.
task aggregatedJavadocs(
    type: Javadoc, 
    description: 'Generate javadocs from all child projects as if it was a single project', 
    group: 'Documentation') {

    doLast {
        println "Created aggregate javadoc"
    }

    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.links 'http://docs.oracle.com/javase/8/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'

    projectsToBePublished.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            dependsOn proj.javadoc

            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

project(':stroom-query-api').build.dependsOn aggregatedJavadocs

clean {
    delete "build"
}
